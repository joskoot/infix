#lang racket

(require "infix.rkt" test-engine/racket-tests)
(print-reader-abbreviations #t)
(error-print-source-location #t)
(define a 1)
(define b 2)
(define c '(a b c))
(define d '(d e f))
(define v (vector 'a 'b 'c))

(check-expect ($ 1) 1)
(check-expect (let ((infix 1)) ($ infix)) 1)
(check-expect (let (($ 1)) (infix $)) 1)
(check-expect (let-values (((+ - * / ^ quote) (values 1 2 3 4 5 6))) ($ list(+,-,*,/,^,quote)))
 (list 1 2 3 4 5 6))
(check-expect (let-values (((- * / ^ quote) (values 1 2 3 4 5))) ($ - + * + / + ^ + quote)) 15)
(check-expect ($ $(1,€ +,2)) 3)
(check-expect ($ €($ 1 + 2)) 3)
(check-expect ($ list(1, 3 + 4, 5 + 6, (+ 7 - 8) / 9, '(a b c))) '(1 7 11 -1/9 (a b c)))
(check-expect ($ append('(a b c),'(d e f))) '(a b c d e f))
(check-expect ($ append(c,d)) '(a b c d e f))
(check-expect ($ vector-length(v)) 3)
(check-expect ($ list(vector-ref(v,1),vector-set!(v,1,'bb), vector-ref(v,1))) `(b ,(void) bb))
(check-expect (let()(local-require(rename-in(only-in racket +)(+ plus)))($ 1 plus 2)) 3)
(check-expect ($ list($(a),$(b),$('(c d e))))'(1 2(c d e)))
(check-expect ($ a + a / b) 3/2)
(check-expect ($ list(c,d)) '((a b c) (d e f)))
(check-expect ($ + - - + - 1) -1)
(check-expect ($ / / - - 1 * / - / - 2) 2)
(check-expect ($ list(1,2,3,4)) '(1 2 3 4))
(check-expect (call-with-values (λ () ($ values(1,2,3,4))) list) '(1 2 3 4))
(check-expect ($ call-with-values(€(λ () ($ values(1,2,3,4))),list)) '(1 2 3 4))
(check-expect (($ λ(€(x),(x * 2))) 3) 6)
(check-expect ($ €($ λ(€(x),(x * 2)))(3)) 6)
(check-expect ($ if(#t,'yes,'no)) 'yes)
(check-expect (let ((a+b 1) (c+d 2)) ($ a+b + c+d)) 3)
(check-expect ($ 2 ^ - 2) 1/4)
(check-expect (let ((+ 2) (- 3)) ($ + * -)) 6)
(check-expect ($ 2 ^ 3 ^ 4) 2417851639229258349412352)
(check-expect ($ 2 ^ (3 ^ 4)) 2417851639229258349412352)
(check-expect ($ (2 ^ 3) ^ 4) 4096)
(check-expect ($ € (+ 1 2)) 3)
(check-expect ($ €(λ(x y)(list x y))('a,'b)) '(a b))
(check-expect ($ 1 + €($ 2)) 3)
(check-expect ($ 1 + €($ 2 + 3)) 6)
(check-expect ($ begin ('aap, 'noot)) 'noot)
(check-expect ($ (4 ! / 2 ! ^ 3) ! !) 720)
(check-within ($ √ '4 !) (√ (! 4)) 1e-10)
(check-expect (let ((+ 2) (- 3)) ($ + * -)) 6)
(check-expect ($ €(list 1 ($ 1 + 1) ($ 1 + 2))) '(1 2 3))
(check-error ($ - 'a) "-: contract violation
  expected: number?
  given: a")
(check-error ($ 3.0 !) "!: contract violation
  expected: exact-nonnegative-integer?
  given: 3.0")
(check-expect ($ 2 expt 3) 8)
(check-expect ($ sqrt (1 + 3)) 2)
(check-expect ($ sqrt add1(3)) 2)
(check-expect ($ `(,($ 1 + 2) ,($ 4 + 4))) '(3 8))
(check-expect ($ let(€((x ($ lazy(1 + 2)))),list(promise?(x),force(x))))'(#t 3))
(check-expect ($ 1 - 2 - 3 - 4) ($ ((1 - 2) - 3) - 4))
(check-expect ($ 1 / 2 / 3 / 4) ($ 1 / (2 / (3 / 4))))
(check-expect ($ 4 ^ 3 ^ 2 ^ 1) ($ 4 ^ (3 ^ (2 ^ 1))))
(check-expect ($ 1 - 2 - 3 - 4) ($ (((1 - 2) - 3) - 4)))
(check-expect ($ 1 - 2 - 3 - 4) (- 1 (+ 2 3 4)))
(check-expect ($ 1 / 2 / 3 / 4) ($ (1 / (2 / (3 / 4)))))
(check-expect ($ 1 / 2 / 3 / 4) (/ (* 1 3) (* 2 4)))
(check-expect ($ Π(i = 1,10) / - i) -1/362880)
(check-expect ($ Π(i = 1,10) - / i) -1/362880)
(check-expect ($ Ʃ(i = 1,10) - / i) -7129/2520)
(check-expect ($ Ʃ(i = 1,10) / - i) -7129/2520)

(define (factorial n) ($ Π(i = 2 , n + 1)i))
(check-expect (for/list ((n (in-range 0 10))) (factorial n))
              '(1 1 2 6 24 120 720 5040 40320 362880))

(check-expect
 ($ let
  (€((port ($ open-output-string ()))),
   parameterize
    (€((current-output-port port)),
    if (zero?(1), write('yes), write('no))),
   get-output-string (port)))
 "no")

(define-syntax (show-expansion stx)
 (syntax-case stx ()
  ((_ (x ...)) #'(simplify (syntax->datum (expand #'(x ...)))))))

(define (simplify x)
 (syntax-case x (#%app quote #%expression #%datum)
  ((#%app y ...) (map simplify (syntax->datum #'(y ...))))
  ((#%expression x) #'x)
  ((#%datum . x) #'x)
  ((quote y) (if (identifier? #'y) x (syntax->datum #'y)))
  ((y ...) (map simplify (syntax->datum #'(y ...))))
  (y x)))

(define-syntax (check-expansion stx)
 (syntax-case stx ()
  ((_ a b)
 #'(check-expect (show-expansion a) 'b))))

(check-expansion ($ √ √ - 2 * 2 * - 2 * 2 + √ - / 9)
                 (- (√ (- (/ 9))) (* (√ (√ (- 2))) 2 2 2)))
(check-expansion ($ 5 / - √ / - 2 * + 3)
                 (- (/ 5 (√ (- (/ 2))) 3)))
(check-expansion ($ 5 * - √ 2 * + 3 + 4)
                 (- 4 (* 5 (√ 2) 3)))
(check-expansion ($ 1 - 2 + 3 - - / √ / 4 + 5 - √ 6 * - 7 * - 8 * 9)
                 (- (+ 1 3 (/ (√ (/ 4))) 5) 2 (* (√ 6) 7 8 9)))
(check-expansion ($ 4 * / (5 + 10))
                 (/ 4 (+ 5 10)))
(check-expansion ($ √ √ - 2 * 2 * - 2 * / / 2 + √ - / 9)
                 (- (√ (- (/ 9))) (* (√ (√ (- 2))) 2 2 2)))
(check-expansion ($ '''1)
                 ''1)
(check-expansion ($ - 2 ^ - 3 ^ - 4)
                 (- (^ 2 (^ (- 3) (- 4)))))
(check-expansion ($ €(λ(x y)(list x y))('a,'b))
                 ((lambda (x y) (list x y)) 'a 'b))
(check-expansion ($ / / - - 1 * / - / - 2)
                 (* 1 2))
(check-expansion ($ (4 ! / 2 ! ^ 3) ! !)
                 (! (! (/ (! 4) (^ (! 2) 3)))))
(check-expansion ($ €(a + b + c))
                 (a + b + c))
(check-expansion ($ €($ a + b))
                 (+ a b))
(check-expansion ($ √ '3 !)
                 (√ (! 3)))
(check-expansion ($ a (b))
                 (a b))
(check-expansion ($ a * (b))
                 (* a b))
(check-expansion ($ √ 4 !)
                 (√ (! 4)))
(check-expansion ($ €(list 1 ($ 1 + 1) ($ 1 + 2)))
                 (list 1 (+ 1 1) (+ 1 2)))
(check-expansion ($ list(1,€($ 1 + 1),€($ 1 + 2)))
                 (list 1 (+ 1 1) (+ 1 2)))
(check-expansion ($ 1 ^ 2 ^ 3 ^ 4)
                 (^ 1 (^ 2 (^ 3 4))))
(check-expansion ($ €($ λ(€(x),(x * 2)))(3))
                 ((lambda (x) (* x 2)) 3))

(test)




